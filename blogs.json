{"status":"ok","feed":{"url":"https://medium.com/feed/@bobirawan","title":"Stories by Bobby Irawan on Medium","link":"https://medium.com/@bobirawan?source=rss-e396eba39441------2","author":"","description":"Stories by Bobby Irawan on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/2*urcx8_MTc1LvtkavJd39HA.png"},"items":[{"title":"Automating Your Android Code Review Process","pubDate":"2022-01-20 01:48:38","link":"https://betterprogramming.pub/automate-part-of-your-code-review-process-cf83e644d356?source=rss-e396eba39441------2","guid":"https://medium.com/p/cf83e644d356","author":"Bobby Irawan","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*djjogKOuAg0quXm5D5iyhw.jpeg","description":"\n<h4>Or a part of the process with these\u00a0tools</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*djjogKOuAg0quXm5D5iyhw.jpeg\"><figcaption>Credit by <a href=\"https://unsplash.com/photos/HBGYvOKXu8A\">Jason\u00a0Leung</a></figcaption></figure><p>In a big company or a non-individual project, there will always be a code review. Your other team member will be reviewing your code and commenting if there is some suspicion. It\u2019s a tiring process moreover if the changes file is huge. Realize or not when reviewing the code, you will always see some unnecessary things that shouldn't catch your eyes. Like indentation, class structure, wildcard import, code convention, etc. Well, you can relax, those trivial problems can be solved automatically by static code analysis.</p>\n<p>What is exactly static code analysis? It's a process of examining the code without running the program. The examining process is based on a set of rules that developers or the tool already set. Of course, you don\u2019t have to do it manually, fortunately, there is a tool that can do the job automatically. This tool is called a static code analyzer. There are many famous static code analysis tools, such as <a href=\"https://developer.android.com/studio/write/lint\">Android Lint</a>, <a href=\"https://github.com/pinterest/ktlint\">Ktlint</a>, <a href=\"https://github.com/detekt/detekt\">Detekt</a>, <a href=\"https://github.com/diffplug/spotless\">Spotless</a>, etc. Some tools like <a href=\"https://www.sonarqube.org/\">SonarQube</a> do more than just analyzing code, it looks at your code vulnerability, duplicate code,\u00a0etc.</p>\n<p>There are many benefits to implementing these static code analysis tools in our\u00a0project.</p>\n<ol>\n<li>\n<strong>Time</strong>. Adding a static code analyzer means that the code that was successfully committed already met the standard. When reviewing the code, we just need to focus on important things. You can also run the process before or after pushing to the origin and before merging to master. Chose suits you the most, the goal is the\u00a0same.</li>\n<li>\n<strong>Enforcing standard code</strong>.<strong> </strong>Working with many people on one project needs to have some standard. Implement static code analyzer forcing the developer to follow the\u00a0rule.</li>\n<li>\n<strong>Minimize bug and performance issues</strong>. Some rules already follow the standard guideline that makes our app perform better. Like using <em>for each</em> and <em>inline</em> function when\u00a0needed.</li>\n</ol>\n<p>In this article, we will cover the fundamental usage of Ktlint and Detekt since its pretty famous in the community (more than 4k stars each). For demo purposes, I had created a simple project that had everything I will explain later, get it\u00a0<a href=\"https://github.com/bobbyirawan09/StaticAnalyzer\">here</a>.</p>\n<h3>Ktlint</h3>\n<p>According to the official documentation, Ktlint is an anti-bikeshedding Kotlin linter with a built-in formatter. There are some rules that are active by default when running the Ktlint task, which you can find <a href=\"https://ktlint.github.io/#rules\">here</a>. Let\u2019s start to integrate it into the Android\u00a0project.</p>\n<ul><li>Add the dependency. It\u2019s recommended to use the plugin as stated <a href=\"https://github.com/pinterest/ktlint#with-a-plugin---recommended\">here</a>. We will use <a href=\"https://github.com/jlleitschuh/ktlint-gradle\">Jlleitschuh</a>.</li></ul>\n<a href=\"https://medium.com/media/4d060b6af1cadb2858b8d520a6ed1f02/href\">https://medium.com/media/4d060b6af1cadb2858b8d520a6ed1f02/href</a><ul><li>Add the Ktlint configuration. We will implement it in <em>allProjects</em> so other modules will be integrated with Ktlint. From the picture below, you can see there is some additional configuration. I\u2019m not gonna explain it here, go check the project, as I add some comments\u00a0there.</li></ul>\n<a href=\"https://medium.com/media/d0f33235fa75e3981cbb140d7395d2cf/href\">https://medium.com/media/d0f33235fa75e3981cbb140d7395d2cf/href</a><ul><li>(Optional) You can also modify the report file directory. By default, it will be placed in build/reports/ktlint.</li></ul>\n<a href=\"https://medium.com/media/054b58408ac211e6fa415f3404ac3ac0/href\">https://medium.com/media/054b58408ac211e6fa415f3404ac3ac0/href</a><ul><li>Go sync your project. After that, you are now successfully integrating Ktlint into the Android\u00a0project.</li></ul>\n<p>To check if the Ktlint task is available to be executed, run the\u00a0<em>./gradlew task </em>command on the terminal, the result should be like\u00a0below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YrIfq9W2EXk53hmpTGZVGQ.png\"></figure><p>Ktlint had two Gradle tasks you can run, each had its own job. First is <em>ktlintCheck, </em>it will check all of your code and report if there is some violation. The second is <em>ktlintFormat, </em>the job is the same with ktlintCheck but there is an additional job. It will also reformat your code automatically based on the rules. Please keep in mind that it had limitations, not every violation will reformat.</p>\n<p>You can get the full code for Ktlint integration <a href=\"https://github.com/bobbyirawan09/StaticAnalyzer/blob/master/build.gradle.kts\">here</a>.</p>\n<h3><strong>Detekt</strong></h3>\n<p><a href=\"https://detekt.github.io/detekt/index.html\">Detekt</a> is a static code analyzer. It had the same main job as Ktlint, scanning your code and reporting it if there is a violation, but it is much more powerful, at least for me. Detekt also comes with pre-defined rules that we can switch to turn on and off easily, for complete rules check it\u00a0<a href=\"https://detekt.github.io/detekt/comments.html\">here</a>.</p>\n<ul><li>Same with Ktlint, add the dependency first. Find out more\u00a0<a href=\"https://detekt.github.io/detekt/gradle.html#kotlin-dsl-2\">here</a>.</li></ul>\n<a href=\"https://medium.com/media/700197dcd02e1f78c752fdfe01e04d1a/href\">https://medium.com/media/700197dcd02e1f78c752fdfe01e04d1a/href</a><ul><li>Add some configuration to Detekt. We will implement the configuration in <em>allProject</em>. For the multimodule project, there is a feature to merge reports from all modules in just one report file. There is also baseline and config placement.</li></ul>\n<a href=\"https://medium.com/media/20ac5b0695ece5aaa252f46df62c394f/href\">https://medium.com/media/20ac5b0695ece5aaa252f46df62c394f/href</a><ul><li>Sync project and check for available Gradle task, make sure you can find detekt\u00a0there.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BqgNdz9ZO6FEegOo9EH_5Q.png\"><figcaption>Step 3, check available Gradle task for\u00a0Detekt</figcaption></figure><p>Besides rules that come by default, you can add your own rule to Detekt. Let say you had a convention or some restriction when coding in your company or project, you can add that to Detekt, so Detekt will include those rules when inspecting the code. You can find this in the project but the how-to will be explained in a separate\u00a0article.</p>\n<p>Also, every violation had its own time prediction to resolve it. This prediction is imprinted in each rule. When the report is out, it will also tell how much time you and your team need to fix all the violations. It could take days, weeks, or even\u00a0months</p>\n<p>That\u2019s it! You are all set! Now you can start to utilize Ktlint and Detekt in your project. But please keep in mind, especially in the big project, the time to fix the issue is not short. You can start to implement the rule one by one at a time. Once a rule is passed, then continue to the\u00a0next.</p>\n<p>You can get the full code for Detekt integration <a href=\"https://github.com/bobbyirawan09/StaticAnalyzer/blob/detekt/build.gradle.kts\">here</a>.</p>\n<h3><strong>Closing statement</strong></h3>\n<p>Static code analysis's main role is to help us to take care of issues like code convention, code performance, etc.</p>\n<p>Please choose which tools covered your use case. Other than the two we had just discussed, there are some others that were mentioned earlier that are worth looking at and trying. The setup process is only the beginning, adding to the pipeline, making each coding pass all rules, and other things you need to do to fully utilize this on your project/team. Take your time, add the rules one by one, make your code to follow all the rules at once could cause a headache.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://detekt.github.io/detekt/\">detekt</a></li>\n<li><a href=\"https://github.com/jlleitschuh/ktlint-gradle\">GitHub - JLLeitschuh/ktlint-gradle: A ktlint gradle plugin</a></li>\n</ul>\n<p>For the full project, you can check my Github\u00a0<a href=\"https://github.com/bobbyirawan09/StaticAnalyzer\">here</a>.</p>\n<p>Thanks for\u00a0reading.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cf83e644d356\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/automate-part-of-your-code-review-process-cf83e644d356\">Automating Your Android Code Review Process</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","content":"\n<h4>Or a part of the process with these\u00a0tools</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*djjogKOuAg0quXm5D5iyhw.jpeg\"><figcaption>Credit by <a href=\"https://unsplash.com/photos/HBGYvOKXu8A\">Jason\u00a0Leung</a></figcaption></figure><p>In a big company or a non-individual project, there will always be a code review. Your other team member will be reviewing your code and commenting if there is some suspicion. It\u2019s a tiring process moreover if the changes file is huge. Realize or not when reviewing the code, you will always see some unnecessary things that shouldn't catch your eyes. Like indentation, class structure, wildcard import, code convention, etc. Well, you can relax, those trivial problems can be solved automatically by static code analysis.</p>\n<p>What is exactly static code analysis? It's a process of examining the code without running the program. The examining process is based on a set of rules that developers or the tool already set. Of course, you don\u2019t have to do it manually, fortunately, there is a tool that can do the job automatically. This tool is called a static code analyzer. There are many famous static code analysis tools, such as <a href=\"https://developer.android.com/studio/write/lint\">Android Lint</a>, <a href=\"https://github.com/pinterest/ktlint\">Ktlint</a>, <a href=\"https://github.com/detekt/detekt\">Detekt</a>, <a href=\"https://github.com/diffplug/spotless\">Spotless</a>, etc. Some tools like <a href=\"https://www.sonarqube.org/\">SonarQube</a> do more than just analyzing code, it looks at your code vulnerability, duplicate code,\u00a0etc.</p>\n<p>There are many benefits to implementing these static code analysis tools in our\u00a0project.</p>\n<ol>\n<li>\n<strong>Time</strong>. Adding a static code analyzer means that the code that was successfully committed already met the standard. When reviewing the code, we just need to focus on important things. You can also run the process before or after pushing to the origin and before merging to master. Chose suits you the most, the goal is the\u00a0same.</li>\n<li>\n<strong>Enforcing standard code</strong>.<strong> </strong>Working with many people on one project needs to have some standard. Implement static code analyzer forcing the developer to follow the\u00a0rule.</li>\n<li>\n<strong>Minimize bug and performance issues</strong>. Some rules already follow the standard guideline that makes our app perform better. Like using <em>for each</em> and <em>inline</em> function when\u00a0needed.</li>\n</ol>\n<p>In this article, we will cover the fundamental usage of Ktlint and Detekt since its pretty famous in the community (more than 4k stars each). For demo purposes, I had created a simple project that had everything I will explain later, get it\u00a0<a href=\"https://github.com/bobbyirawan09/StaticAnalyzer\">here</a>.</p>\n<h3>Ktlint</h3>\n<p>According to the official documentation, Ktlint is an anti-bikeshedding Kotlin linter with a built-in formatter. There are some rules that are active by default when running the Ktlint task, which you can find <a href=\"https://ktlint.github.io/#rules\">here</a>. Let\u2019s start to integrate it into the Android\u00a0project.</p>\n<ul><li>Add the dependency. It\u2019s recommended to use the plugin as stated <a href=\"https://github.com/pinterest/ktlint#with-a-plugin---recommended\">here</a>. We will use <a href=\"https://github.com/jlleitschuh/ktlint-gradle\">Jlleitschuh</a>.</li></ul>\n<a href=\"https://medium.com/media/4d060b6af1cadb2858b8d520a6ed1f02/href\">https://medium.com/media/4d060b6af1cadb2858b8d520a6ed1f02/href</a><ul><li>Add the Ktlint configuration. We will implement it in <em>allProjects</em> so other modules will be integrated with Ktlint. From the picture below, you can see there is some additional configuration. I\u2019m not gonna explain it here, go check the project, as I add some comments\u00a0there.</li></ul>\n<a href=\"https://medium.com/media/d0f33235fa75e3981cbb140d7395d2cf/href\">https://medium.com/media/d0f33235fa75e3981cbb140d7395d2cf/href</a><ul><li>(Optional) You can also modify the report file directory. By default, it will be placed in build/reports/ktlint.</li></ul>\n<a href=\"https://medium.com/media/054b58408ac211e6fa415f3404ac3ac0/href\">https://medium.com/media/054b58408ac211e6fa415f3404ac3ac0/href</a><ul><li>Go sync your project. After that, you are now successfully integrating Ktlint into the Android\u00a0project.</li></ul>\n<p>To check if the Ktlint task is available to be executed, run the\u00a0<em>./gradlew task </em>command on the terminal, the result should be like\u00a0below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YrIfq9W2EXk53hmpTGZVGQ.png\"></figure><p>Ktlint had two Gradle tasks you can run, each had its own job. First is <em>ktlintCheck, </em>it will check all of your code and report if there is some violation. The second is <em>ktlintFormat, </em>the job is the same with ktlintCheck but there is an additional job. It will also reformat your code automatically based on the rules. Please keep in mind that it had limitations, not every violation will reformat.</p>\n<p>You can get the full code for Ktlint integration <a href=\"https://github.com/bobbyirawan09/StaticAnalyzer/blob/master/build.gradle.kts\">here</a>.</p>\n<h3><strong>Detekt</strong></h3>\n<p><a href=\"https://detekt.github.io/detekt/index.html\">Detekt</a> is a static code analyzer. It had the same main job as Ktlint, scanning your code and reporting it if there is a violation, but it is much more powerful, at least for me. Detekt also comes with pre-defined rules that we can switch to turn on and off easily, for complete rules check it\u00a0<a href=\"https://detekt.github.io/detekt/comments.html\">here</a>.</p>\n<ul><li>Same with Ktlint, add the dependency first. Find out more\u00a0<a href=\"https://detekt.github.io/detekt/gradle.html#kotlin-dsl-2\">here</a>.</li></ul>\n<a href=\"https://medium.com/media/700197dcd02e1f78c752fdfe01e04d1a/href\">https://medium.com/media/700197dcd02e1f78c752fdfe01e04d1a/href</a><ul><li>Add some configuration to Detekt. We will implement the configuration in <em>allProject</em>. For the multimodule project, there is a feature to merge reports from all modules in just one report file. There is also baseline and config placement.</li></ul>\n<a href=\"https://medium.com/media/20ac5b0695ece5aaa252f46df62c394f/href\">https://medium.com/media/20ac5b0695ece5aaa252f46df62c394f/href</a><ul><li>Sync project and check for available Gradle task, make sure you can find detekt\u00a0there.</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BqgNdz9ZO6FEegOo9EH_5Q.png\"><figcaption>Step 3, check available Gradle task for\u00a0Detekt</figcaption></figure><p>Besides rules that come by default, you can add your own rule to Detekt. Let say you had a convention or some restriction when coding in your company or project, you can add that to Detekt, so Detekt will include those rules when inspecting the code. You can find this in the project but the how-to will be explained in a separate\u00a0article.</p>\n<p>Also, every violation had its own time prediction to resolve it. This prediction is imprinted in each rule. When the report is out, it will also tell how much time you and your team need to fix all the violations. It could take days, weeks, or even\u00a0months</p>\n<p>That\u2019s it! You are all set! Now you can start to utilize Ktlint and Detekt in your project. But please keep in mind, especially in the big project, the time to fix the issue is not short. You can start to implement the rule one by one at a time. Once a rule is passed, then continue to the\u00a0next.</p>\n<p>You can get the full code for Detekt integration <a href=\"https://github.com/bobbyirawan09/StaticAnalyzer/blob/detekt/build.gradle.kts\">here</a>.</p>\n<h3><strong>Closing statement</strong></h3>\n<p>Static code analysis's main role is to help us to take care of issues like code convention, code performance, etc.</p>\n<p>Please choose which tools covered your use case. Other than the two we had just discussed, there are some others that were mentioned earlier that are worth looking at and trying. The setup process is only the beginning, adding to the pipeline, making each coding pass all rules, and other things you need to do to fully utilize this on your project/team. Take your time, add the rules one by one, make your code to follow all the rules at once could cause a headache.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://detekt.github.io/detekt/\">detekt</a></li>\n<li><a href=\"https://github.com/jlleitschuh/ktlint-gradle\">GitHub - JLLeitschuh/ktlint-gradle: A ktlint gradle plugin</a></li>\n</ul>\n<p>For the full project, you can check my Github\u00a0<a href=\"https://github.com/bobbyirawan09/StaticAnalyzer\">here</a>.</p>\n<p>Thanks for\u00a0reading.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=cf83e644d356\" width=\"1\" height=\"1\" alt=\"\"><hr>\n<p><a href=\"https://betterprogramming.pub/automate-part-of-your-code-review-process-cf83e644d356\">Automating Your Android Code Review Process</a> was originally published in <a href=\"https://betterprogramming.pub/\">Better Programming</a> on Medium, where people are continuing the conversation by highlighting and responding to this story.</p>\n","enclosure":{},"categories":["programming","kotlin","software-engineering","android","coding"]},{"title":"Improve your Android project and application security","pubDate":"2021-09-07 14:50:07","link":"https://bobirawan.medium.com/improve-your-android-project-and-application-security-ecf0b928c47b?source=rss-e396eba39441------2","guid":"https://medium.com/p/ecf0b928c47b","author":"Bobby Irawan","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*UwcRkfeyOqaU5bJ9tmrGPg.jpeg","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UwcRkfeyOqaU5bJ9tmrGPg.jpeg\"><figcaption><a href=\"https://images.unsplash.com/photo-1493129922668-fcb1a8514643?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1596&amp;q=80\">Image by Jose\u00a0Fontano</a></figcaption></figure><p>You work on your app day and night, whether for a client, the place where you work full time, or your own personal project. After all those hard work, you asked, \u201cHow about the security of the app? What if another person tries to reverse engineer?\u201d, and so on. Security is important, especially if you create an application for financial services, such as a bank or a fintech company. Making an application without concern for security is like you hiking to a mountain without having a GPS or any emergency tools, you don\u2019t feel safe. Moreover, we live in an era where everything is done through the application, like payment, groceries, taking notes, chat, reading news, and many more. If there is a security hole there, people can use that to stole users\u2019\u00a0data.</p>\n<p>In Android development, there are many ways you can improve the security, some done by the developer, and some are done by a third-party vendor. From securing your private key to prevent a person gained access to your project or even reverse engineer your\u00a0app.</p>\n<p><em>Disclaimer, I\u2019m not gonna go into detail for each point. The purpose is to give you an introduction. You can use the link attached to learn\u00a0deeply.</em></p>\n<h3>Secure the API\u00a0key</h3>\n<p>No matter your application big or small, you will always had an API key that will be used, for example, to access and get data from News API. The key is sensitive data, if a person gets your API key, that person can use the key for personal usage or maybe use it to abuse and increase your cost. I had faced some issues with, this, although it is not because the API key is stolen. A user from another country tries to abuse the OTP service that our app had. This person keeps requesting OTP, as you guys know, every time user requests an OTP, it had some cost with it. This is just an example, think about what would happen if your API key is stolen, it will be\u00a0worse.</p>\n<p>There is some way to secure your API key, from the minimum effort to the maximum effort you can\u00a0do.</p>\n<blockquote><strong>String resource</strong></blockquote>\n<p>We put without any encryption or some masking that. This is obviously not secure. The reason is, when you try to reverse engineer the app, no matter if you implement Proguard or not, you can see clearly the API\u00a0key.</p>\n<blockquote><strong>Inside\u00a0.properties file</strong></blockquote>\n<p>There are two infamous\u00a0.properties files that developers usually use to save their key, local.properties and gradle.properties. To access the key you saved in those two files, you need to import the BuildConfig file that is filled with the variable name containing your key. Code below is an example of how to set the key from the properties file so that it is available in the BuildConfig file and you can use it in the\u00a0project.</p>\n<p>For those who build a personal project and post it to the public repository in Github or Gitlab, you should be done implement this, if not, please do it as soon as possible. Every time we add anything inside this file, and you commit your changes, it won\u2019t get committed to your repository. This happens because the file is included in <em>gitignore. </em>Because your repository is public, it means that everyone can access, either download, or just sightseeing your project. If you put your key in string resource, others can see and use the key. Of course, because it's a personal project you won\u2019t pay for an API, but still, it can decrease your API call\u00a0quota.</p>\n<blockquote><strong>CMake</strong></blockquote>\n<p>Compare with the two previous methods, this should be the safest and the most secure way. In Android Studio, there is an available option to install the CMake, and comes with that, you also need to install the NDK (Native Development Kit). According to the official documentation, the NDK is a set of tools that allow us to use C /C++ code with Android. The CMake itself is a recommended tool for build C /C++\u00a0codes.</p>\n<p>Save your key in CMake, make the C/C++ code that contains your key compiled into\u00a0.so files. This file is much harder for hackers to break through and get your key. Although it wasn\u2019t impossible for hackers to unable decompile the file, it still takes a lot of time. One thing to remind, when you implement this, there could be some strange error that will be shown in your Crashlytics, like the stack trace below. If you realize and it starts to increase, check <a href=\"https://github.com/android/ndk/issues/979\">this</a> Github, it works for\u00a0me.</p>\n<pre>Fatal Exception: java.lang.UnsatisfiedLinkError: dlopen failed: couldn't map \"/mnt/asec/your.package.name-1/split_config.armeabi_v7a.apk!/lib/armeabi-v7a/libnative-lib.so\" segment 1: Permission denied<br>       at java.lang.Runtime.loadLibrary0(Runtime.java:1016)<br>       at java.lang.System.loadLibrary(System.java:1657)<br>       at your.package.name.utils.Keys.&lt;clinit&gt;(Keys.java:9)<br>       at your.application.class.name.onDoSomething(ExampleApplication.java:68)<br>       at your.application.class.name.onCreate(ExampleApplication.java:47)<br>       at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1126)<br>       at android.app.ActivityThread.handleBindApplication(ActivityThread.java:6062)<br>       at android.app.ActivityThread.-wrap1(ActivityThread.java)<br>       at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1764)<br>       at android.os.Handler.dispatchMessage(Handler.java:105)<br>       at android.os.Looper.loop(Looper.java:164)<br>       at android.app.ActivityThread.main(ActivityThread.java:6942)<br>       at java.lang.reflect.Method.invoke(Method.java)<br>       at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)<br>       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)</pre>\n<h3>Android Keystore</h3>\n<p>When performing cryptography, especially using asymmetric cryptography, we need to find a place to save those keys securely. For those, who don\u2019t know what is asymmetric cryptography, it's basically creating a keypair, private and public key. One of the keys will be to decrypt the data and the other one is to encrypt the data. Besides, decrypt and encrypt data, we can also do sign and\u00a0verify.</p>\n<p>Android Keystore is the best place to save the keypair securely in the Android environment. In Android Keystore, AFAIK, you can\u2019t export, print the data, or even put a method breakpoint to get the byte code of the private key. This is intended, as the purpose of the private key is to be kept by the generator for decrypting encrypted data from the public key or sign data for the public key to verify. Keystore support many combinations of algorithm that we can use, for me, the go-to will always RSA, read\u00a0<a href=\"https://developer.android.com/training/articles/keystore#SupportedAlgorithms\">here</a>.</p>\n<p>If you still don\u2019t know where to implement this, take fingerprint for example. After users register fingerprint data from the device, we send the public key to the API so the API can do some encryption of data that will be decrypted by our app. Decrypting process is done and we send back the data to the API, to be verified by API from the data that has been decrypted by the app, is it a match from the key or data that API generated before. Please explore other possibilities to implement this as my scenario won\u2019t be the best way to describe what most users\u00a0faced.</p>\n<h3>Security best practices from\u00a0Google</h3>\n<p>The best resource for every developer to learn about any technology is always the official documentation. Some of you may not realize that Google already released the documentation about app security best practices that we can start to adopt immediately. Not just the best practices, but other security-related topics like Android Keystore from earlier. The level is from beginner to advance. Start from there, and explore any terminology or something you did not yet discover and understand. Some best practices you may start to use\u00a0are:</p>\n<ul>\n<li>HTML message channel, if your app is based on Webview instead of full\u00a0native.</li>\n<li>Network security config (if\u00a0needed)</li>\n<li>Asking users the right permission</li>\n</ul>\n<p>Read more\u00a0<a href=\"https://developer.android.com/topic/security/best-practices\">here</a>.</p>\n<h3>Third-party library</h3>\n<blockquote><strong>Jetpack security</strong></blockquote>\n<p>When comes to shared preference, we don\u2019t take much care about it, it is just a bunch of flags like login state, so we don\u2019t need to check to the API. It's a different story when you save sensitive data such as tokens from JWT or maybe other credentials. Fortunately, there is a solution for this, Jetpack comes with a library that increases the security level of your shared preference called Jetpack security. What this library does is encrypt the data you save to the encrypted shared preference. It uses Android Keystore and a well-known cryptographic algorithm to run the process. Of course, you can always do the thing manually, but using a library like Jetpack security is much simpler and easier than handle it manually.</p>\n<p>When you already use the normal shared preference and want to migrate it to the encrypted version, you need to do it manually on run time. You can do it by following <a href=\"https://impateljay.medium.com/migration-from-sharedpreferences-to-encryptedsharedpreferences-48bedb661985\">this article</a>, it is easy to\u00a0follow.</p>\n<p>Important notes, when I try this library on production, there is some issue when creating the EncryptedSharedPreferences object, until now September 2021, the issue is still there. To make the app not become broken when this happens, you need a fallback process. I personally will create the SharedPreference object if there is some exception happen when creating the object of EncryptedSharedPreference. Although it will break some features along the way, it is still better than not to do it. Google issue tracker\u00a0<a href=\"https://issuetracker.google.com/issues/167977579?pli=1\">here</a>.</p>\n<blockquote><strong>SQLCipher</strong></blockquote>\n<p>We save a lot of data in our local database, caching data, user favorite list that handles locally, and other local stuff. If you using Room for local database, you can use this library without any issue, because the SQLCipher is compatible with all SQLite functions. The SQLCipher adding an encryption layer to SQLite, this makes the data you save will be in an encrypted format but you can get the data decrypted or its original value. More about the library <a href=\"https://www.zetetic.net/sqlcipher/design/\">here</a>. Also, I found <a href=\"https://sonique6784.medium.com/protect-your-room-database-with-sqlcipher-on-android-78e0681be687\">this</a> great article that demonstrates how to use this in the\u00a0project.</p>\n<h3>End of\u00a0word</h3>\n<p>Security is as important as giving the best experience for the user when using the app. It gives a comfortable feeling to know that their data won\u2019t be use or exposed by other people. Please, explore more about Android security besides in this article, there are tons out there. Hope this enlightens the vision of how to increase security in our project and our\u00a0app.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://blog.kotlin-academy.com/how-to-secure-secrets-in-android-android-security-01-a345e97c82be\">How to Secure Secrets \ud83d\udd11 in Android \u2014 Android Security-01</a></li>\n<li><a href=\"https://medium.com/@sourav.bh/build-a-native-android-library-or-module-using-ndk-and-cmake-71988b00b5dd\">Build a Native Android Library or Module using NDK and CMake</a></li>\n<li><a href=\"https://sonique6784.medium.com/protect-your-room-database-with-sqlcipher-on-android-78e0681be687\">Protect your Room database with SQLCipher on Android</a></li>\n</ul>\n<p>Thanks for reading. If you find this article useful or you learn something from this, please share and give a clap for it. Had any questions or want to give some feedback, leave a comment below.\u00a0\ud83d\ude4c</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ecf0b928c47b\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UwcRkfeyOqaU5bJ9tmrGPg.jpeg\"><figcaption><a href=\"https://images.unsplash.com/photo-1493129922668-fcb1a8514643?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=1596&amp;q=80\">Image by Jose\u00a0Fontano</a></figcaption></figure><p>You work on your app day and night, whether for a client, the place where you work full time, or your own personal project. After all those hard work, you asked, \u201cHow about the security of the app? What if another person tries to reverse engineer?\u201d, and so on. Security is important, especially if you create an application for financial services, such as a bank or a fintech company. Making an application without concern for security is like you hiking to a mountain without having a GPS or any emergency tools, you don\u2019t feel safe. Moreover, we live in an era where everything is done through the application, like payment, groceries, taking notes, chat, reading news, and many more. If there is a security hole there, people can use that to stole users\u2019\u00a0data.</p>\n<p>In Android development, there are many ways you can improve the security, some done by the developer, and some are done by a third-party vendor. From securing your private key to prevent a person gained access to your project or even reverse engineer your\u00a0app.</p>\n<p><em>Disclaimer, I\u2019m not gonna go into detail for each point. The purpose is to give you an introduction. You can use the link attached to learn\u00a0deeply.</em></p>\n<h3>Secure the API\u00a0key</h3>\n<p>No matter your application big or small, you will always had an API key that will be used, for example, to access and get data from News API. The key is sensitive data, if a person gets your API key, that person can use the key for personal usage or maybe use it to abuse and increase your cost. I had faced some issues with, this, although it is not because the API key is stolen. A user from another country tries to abuse the OTP service that our app had. This person keeps requesting OTP, as you guys know, every time user requests an OTP, it had some cost with it. This is just an example, think about what would happen if your API key is stolen, it will be\u00a0worse.</p>\n<p>There is some way to secure your API key, from the minimum effort to the maximum effort you can\u00a0do.</p>\n<blockquote><strong>String resource</strong></blockquote>\n<p>We put without any encryption or some masking that. This is obviously not secure. The reason is, when you try to reverse engineer the app, no matter if you implement Proguard or not, you can see clearly the API\u00a0key.</p>\n<blockquote><strong>Inside\u00a0.properties file</strong></blockquote>\n<p>There are two infamous\u00a0.properties files that developers usually use to save their key, local.properties and gradle.properties. To access the key you saved in those two files, you need to import the BuildConfig file that is filled with the variable name containing your key. Code below is an example of how to set the key from the properties file so that it is available in the BuildConfig file and you can use it in the\u00a0project.</p>\n<p>For those who build a personal project and post it to the public repository in Github or Gitlab, you should be done implement this, if not, please do it as soon as possible. Every time we add anything inside this file, and you commit your changes, it won\u2019t get committed to your repository. This happens because the file is included in <em>gitignore. </em>Because your repository is public, it means that everyone can access, either download, or just sightseeing your project. If you put your key in string resource, others can see and use the key. Of course, because it's a personal project you won\u2019t pay for an API, but still, it can decrease your API call\u00a0quota.</p>\n<blockquote><strong>CMake</strong></blockquote>\n<p>Compare with the two previous methods, this should be the safest and the most secure way. In Android Studio, there is an available option to install the CMake, and comes with that, you also need to install the NDK (Native Development Kit). According to the official documentation, the NDK is a set of tools that allow us to use C /C++ code with Android. The CMake itself is a recommended tool for build C /C++\u00a0codes.</p>\n<p>Save your key in CMake, make the C/C++ code that contains your key compiled into\u00a0.so files. This file is much harder for hackers to break through and get your key. Although it wasn\u2019t impossible for hackers to unable decompile the file, it still takes a lot of time. One thing to remind, when you implement this, there could be some strange error that will be shown in your Crashlytics, like the stack trace below. If you realize and it starts to increase, check <a href=\"https://github.com/android/ndk/issues/979\">this</a> Github, it works for\u00a0me.</p>\n<pre>Fatal Exception: java.lang.UnsatisfiedLinkError: dlopen failed: couldn't map \"/mnt/asec/your.package.name-1/split_config.armeabi_v7a.apk!/lib/armeabi-v7a/libnative-lib.so\" segment 1: Permission denied<br>       at java.lang.Runtime.loadLibrary0(Runtime.java:1016)<br>       at java.lang.System.loadLibrary(System.java:1657)<br>       at your.package.name.utils.Keys.&lt;clinit&gt;(Keys.java:9)<br>       at your.application.class.name.onDoSomething(ExampleApplication.java:68)<br>       at your.application.class.name.onCreate(ExampleApplication.java:47)<br>       at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1126)<br>       at android.app.ActivityThread.handleBindApplication(ActivityThread.java:6062)<br>       at android.app.ActivityThread.-wrap1(ActivityThread.java)<br>       at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1764)<br>       at android.os.Handler.dispatchMessage(Handler.java:105)<br>       at android.os.Looper.loop(Looper.java:164)<br>       at android.app.ActivityThread.main(ActivityThread.java:6942)<br>       at java.lang.reflect.Method.invoke(Method.java)<br>       at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)<br>       at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)</pre>\n<h3>Android Keystore</h3>\n<p>When performing cryptography, especially using asymmetric cryptography, we need to find a place to save those keys securely. For those, who don\u2019t know what is asymmetric cryptography, it's basically creating a keypair, private and public key. One of the keys will be to decrypt the data and the other one is to encrypt the data. Besides, decrypt and encrypt data, we can also do sign and\u00a0verify.</p>\n<p>Android Keystore is the best place to save the keypair securely in the Android environment. In Android Keystore, AFAIK, you can\u2019t export, print the data, or even put a method breakpoint to get the byte code of the private key. This is intended, as the purpose of the private key is to be kept by the generator for decrypting encrypted data from the public key or sign data for the public key to verify. Keystore support many combinations of algorithm that we can use, for me, the go-to will always RSA, read\u00a0<a href=\"https://developer.android.com/training/articles/keystore#SupportedAlgorithms\">here</a>.</p>\n<p>If you still don\u2019t know where to implement this, take fingerprint for example. After users register fingerprint data from the device, we send the public key to the API so the API can do some encryption of data that will be decrypted by our app. Decrypting process is done and we send back the data to the API, to be verified by API from the data that has been decrypted by the app, is it a match from the key or data that API generated before. Please explore other possibilities to implement this as my scenario won\u2019t be the best way to describe what most users\u00a0faced.</p>\n<h3>Security best practices from\u00a0Google</h3>\n<p>The best resource for every developer to learn about any technology is always the official documentation. Some of you may not realize that Google already released the documentation about app security best practices that we can start to adopt immediately. Not just the best practices, but other security-related topics like Android Keystore from earlier. The level is from beginner to advance. Start from there, and explore any terminology or something you did not yet discover and understand. Some best practices you may start to use\u00a0are:</p>\n<ul>\n<li>HTML message channel, if your app is based on Webview instead of full\u00a0native.</li>\n<li>Network security config (if\u00a0needed)</li>\n<li>Asking users the right permission</li>\n</ul>\n<p>Read more\u00a0<a href=\"https://developer.android.com/topic/security/best-practices\">here</a>.</p>\n<h3>Third-party library</h3>\n<blockquote><strong>Jetpack security</strong></blockquote>\n<p>When comes to shared preference, we don\u2019t take much care about it, it is just a bunch of flags like login state, so we don\u2019t need to check to the API. It's a different story when you save sensitive data such as tokens from JWT or maybe other credentials. Fortunately, there is a solution for this, Jetpack comes with a library that increases the security level of your shared preference called Jetpack security. What this library does is encrypt the data you save to the encrypted shared preference. It uses Android Keystore and a well-known cryptographic algorithm to run the process. Of course, you can always do the thing manually, but using a library like Jetpack security is much simpler and easier than handle it manually.</p>\n<p>When you already use the normal shared preference and want to migrate it to the encrypted version, you need to do it manually on run time. You can do it by following <a href=\"https://impateljay.medium.com/migration-from-sharedpreferences-to-encryptedsharedpreferences-48bedb661985\">this article</a>, it is easy to\u00a0follow.</p>\n<p>Important notes, when I try this library on production, there is some issue when creating the EncryptedSharedPreferences object, until now September 2021, the issue is still there. To make the app not become broken when this happens, you need a fallback process. I personally will create the SharedPreference object if there is some exception happen when creating the object of EncryptedSharedPreference. Although it will break some features along the way, it is still better than not to do it. Google issue tracker\u00a0<a href=\"https://issuetracker.google.com/issues/167977579?pli=1\">here</a>.</p>\n<blockquote><strong>SQLCipher</strong></blockquote>\n<p>We save a lot of data in our local database, caching data, user favorite list that handles locally, and other local stuff. If you using Room for local database, you can use this library without any issue, because the SQLCipher is compatible with all SQLite functions. The SQLCipher adding an encryption layer to SQLite, this makes the data you save will be in an encrypted format but you can get the data decrypted or its original value. More about the library <a href=\"https://www.zetetic.net/sqlcipher/design/\">here</a>. Also, I found <a href=\"https://sonique6784.medium.com/protect-your-room-database-with-sqlcipher-on-android-78e0681be687\">this</a> great article that demonstrates how to use this in the\u00a0project.</p>\n<h3>End of\u00a0word</h3>\n<p>Security is as important as giving the best experience for the user when using the app. It gives a comfortable feeling to know that their data won\u2019t be use or exposed by other people. Please, explore more about Android security besides in this article, there are tons out there. Hope this enlightens the vision of how to increase security in our project and our\u00a0app.</p>\n<h3>Resources</h3>\n<ul>\n<li><a href=\"https://blog.kotlin-academy.com/how-to-secure-secrets-in-android-android-security-01-a345e97c82be\">How to Secure Secrets \ud83d\udd11 in Android \u2014 Android Security-01</a></li>\n<li><a href=\"https://medium.com/@sourav.bh/build-a-native-android-library-or-module-using-ndk-and-cmake-71988b00b5dd\">Build a Native Android Library or Module using NDK and CMake</a></li>\n<li><a href=\"https://sonique6784.medium.com/protect-your-room-database-with-sqlcipher-on-android-78e0681be687\">Protect your Room database with SQLCipher on Android</a></li>\n</ul>\n<p>Thanks for reading. If you find this article useful or you learn something from this, please share and give a clap for it. Had any questions or want to give some feedback, leave a comment below.\u00a0\ud83d\ude4c</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=ecf0b928c47b\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["android","app-development","security"]},{"title":"The Coroutine Basics in Android","pubDate":"2021-04-18 14:49:01","link":"https://bobirawan.medium.com/the-coroutine-basics-in-android-15219795c597?source=rss-e396eba39441------2","guid":"https://medium.com/p/15219795c597","author":"Bobby Irawan","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*8ELG0a7FoW2yu_UyRaTWrg.jpeg","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8ELG0a7FoW2yu_UyRaTWrg.jpeg\"><figcaption><a href=\"https://unsplash.com/photos/AxAPuIRWHGk\">Image from Sigmund on\u00a0Unsplash</a></figcaption></figure><p>The data source that we show to the user within the app is not always provided by the application itself (e.g. Room or SharedPreference). Data like user profile, transaction history, and other huge chunks of data are obtained from the server through API. We request for the data to the backend, the backend sends back the data, the app received the data and finally, the data is being shown to the user. We always find this kind of process, nothing new here, and we nicely handled it. Using a third-party library or maybe handle it manually, always works, it won\u2019t be blocking the app when this process happens. AsyncTask (which is deprecated) and RxJava is a well-known library to handle the process while at the same time, keeping our app running like usual. Due to my experience using RxJava, it\u2019s quite complicated compare to Coroutines, which we will discuss in this article. You can widely find articles about the comparison between these two libraries, so it won\u2019t be covered\u00a0here.</p>\n<p>So what is Coroutines you may ask? Coroutines are Kotlin approaches to handle asynchronous tasks or processes. The purpose is the same, to make requesting to the API, like our process above, not blocking our Main Thread and not caused lag or <em>jank</em> which point to bad user experience. Coroutines are not a new concept, the concept already exists for decades and implemented in other programming languages too, such as Go. Many also said that Coroutines is is a lightweight version of Thread. What does light-weight really mean? Well, light-weight means that you can run many processes in a single Coroutines Thread, could be a hundred or a thousand, it still can run well. If you put the same amount of process in a single Thread, it could cause freeze the UI. Please remember that Thread is expensive, must really consider what the Thread is doing or it could cost more in performance.</p>\n<p>But, how do Coroutines actually work? Coroutines are based on a type of function called suspending function. To mark a function so it becomes suspending function, add a suspend modifier to it. You only can call this function inside a Coroutine builder, or from another suspend function. Besides suspend modifier, there's something called resume. It's not a function modifier, but it works to mark a function that will continue to execute if the task on that function is done. Simply put, the suspend mark the function to pause the execution until it finishes, and when it finished, resume will continue the execution from the place it was paused. Between this process, there is also a process that involves Continuation object called Continuation Passing System (CPS), you can read it more\u00a0<a href=\"https://medium.com/google-developer-experts/coroutines-suspending-state-machines-36b189f8aa60\">here</a>.</p>\n<p>After all the introduction, there are a bunch of benefits to using Coroutines. I write this based on my observation and experience, here are\u00a0some:</p>\n<ol>\n<li>Main thread\u00a0safe.</li>\n<li>Jetpack integration, e.g. Room and WorkManager.</li>\n<li>Avoid callback\u00a0hell.</li>\n<li>Easier to\u00a0read.</li>\n<li>Cancellation cooperation.</li>\n</ol>\n<p>Besides all of those benefits, there are things that you should be aware of when using Coroutines.</p>\n<ol>\n<li>Not separate CPU intensive work to another Coroutines Thread</li>\n<li>Bad in handling Coroutines cancellation</li>\n<li>Always think that Coroutines won\u2019t block Main\u00a0Thread</li>\n</ol>\n<p>As Android Developers, we must care about what our users feel about the app that we had built and put a lot of hours into it. Slightly lag or <em>jank</em> could cause the user to stop using and move to another competitor. There are many causes that make the app <em>jank</em>. Animation is too heavy to handle by Android device, too much heavy work in the Main Thread, didn\u2019t move the CPU intensive process to another Thread, and so\u00a0on.</p>\n<p>That\u2019s it folks for our first part. In the next part, I will explain how to create a Coroutines and some basic stuff that goes with it. Stay tuned for it.\u00a0\ud83d\ude04</p>\n<ul>\n<li><a href=\"https://medium.com/google-developer-experts/coroutines-suspending-state-machines-36b189f8aa60\">Coroutines: Suspending State Machines</a></li>\n<li><a href=\"https://medium.com/androiddevelopers/coroutines-on-android-part-i-getting-the-background-3e0e54d20bb\">Coroutines on Android (part I): Getting the background</a></li>\n<li><a href=\"https://elizarov.medium.com/blocking-threads-suspending-coroutines-d33e11bf4761\">Blocking threads, suspending coroutines</a></li>\n<li><a href=\"https://elizarov.medium.com/kotlin-coroutines-a-deeper-look-180536305c3f\">Kotlin Coroutines, a deeper look</a></li>\n</ul>\n<p>Thanks for reading. If you find this article useful or you learn something from this, please share and give a clap for it. Had any questions or want to give some feedback, leave a comment below.\u00a0\ud83d\ude4c</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=15219795c597\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8ELG0a7FoW2yu_UyRaTWrg.jpeg\"><figcaption><a href=\"https://unsplash.com/photos/AxAPuIRWHGk\">Image from Sigmund on\u00a0Unsplash</a></figcaption></figure><p>The data source that we show to the user within the app is not always provided by the application itself (e.g. Room or SharedPreference). Data like user profile, transaction history, and other huge chunks of data are obtained from the server through API. We request for the data to the backend, the backend sends back the data, the app received the data and finally, the data is being shown to the user. We always find this kind of process, nothing new here, and we nicely handled it. Using a third-party library or maybe handle it manually, always works, it won\u2019t be blocking the app when this process happens. AsyncTask (which is deprecated) and RxJava is a well-known library to handle the process while at the same time, keeping our app running like usual. Due to my experience using RxJava, it\u2019s quite complicated compare to Coroutines, which we will discuss in this article. You can widely find articles about the comparison between these two libraries, so it won\u2019t be covered\u00a0here.</p>\n<p>So what is Coroutines you may ask? Coroutines are Kotlin approaches to handle asynchronous tasks or processes. The purpose is the same, to make requesting to the API, like our process above, not blocking our Main Thread and not caused lag or <em>jank</em> which point to bad user experience. Coroutines are not a new concept, the concept already exists for decades and implemented in other programming languages too, such as Go. Many also said that Coroutines is is a lightweight version of Thread. What does light-weight really mean? Well, light-weight means that you can run many processes in a single Coroutines Thread, could be a hundred or a thousand, it still can run well. If you put the same amount of process in a single Thread, it could cause freeze the UI. Please remember that Thread is expensive, must really consider what the Thread is doing or it could cost more in performance.</p>\n<p>But, how do Coroutines actually work? Coroutines are based on a type of function called suspending function. To mark a function so it becomes suspending function, add a suspend modifier to it. You only can call this function inside a Coroutine builder, or from another suspend function. Besides suspend modifier, there's something called resume. It's not a function modifier, but it works to mark a function that will continue to execute if the task on that function is done. Simply put, the suspend mark the function to pause the execution until it finishes, and when it finished, resume will continue the execution from the place it was paused. Between this process, there is also a process that involves Continuation object called Continuation Passing System (CPS), you can read it more\u00a0<a href=\"https://medium.com/google-developer-experts/coroutines-suspending-state-machines-36b189f8aa60\">here</a>.</p>\n<p>After all the introduction, there are a bunch of benefits to using Coroutines. I write this based on my observation and experience, here are\u00a0some:</p>\n<ol>\n<li>Main thread\u00a0safe.</li>\n<li>Jetpack integration, e.g. Room and WorkManager.</li>\n<li>Avoid callback\u00a0hell.</li>\n<li>Easier to\u00a0read.</li>\n<li>Cancellation cooperation.</li>\n</ol>\n<p>Besides all of those benefits, there are things that you should be aware of when using Coroutines.</p>\n<ol>\n<li>Not separate CPU intensive work to another Coroutines Thread</li>\n<li>Bad in handling Coroutines cancellation</li>\n<li>Always think that Coroutines won\u2019t block Main\u00a0Thread</li>\n</ol>\n<p>As Android Developers, we must care about what our users feel about the app that we had built and put a lot of hours into it. Slightly lag or <em>jank</em> could cause the user to stop using and move to another competitor. There are many causes that make the app <em>jank</em>. Animation is too heavy to handle by Android device, too much heavy work in the Main Thread, didn\u2019t move the CPU intensive process to another Thread, and so\u00a0on.</p>\n<p>That\u2019s it folks for our first part. In the next part, I will explain how to create a Coroutines and some basic stuff that goes with it. Stay tuned for it.\u00a0\ud83d\ude04</p>\n<ul>\n<li><a href=\"https://medium.com/google-developer-experts/coroutines-suspending-state-machines-36b189f8aa60\">Coroutines: Suspending State Machines</a></li>\n<li><a href=\"https://medium.com/androiddevelopers/coroutines-on-android-part-i-getting-the-background-3e0e54d20bb\">Coroutines on Android (part I): Getting the background</a></li>\n<li><a href=\"https://elizarov.medium.com/blocking-threads-suspending-coroutines-d33e11bf4761\">Blocking threads, suspending coroutines</a></li>\n<li><a href=\"https://elizarov.medium.com/kotlin-coroutines-a-deeper-look-180536305c3f\">Kotlin Coroutines, a deeper look</a></li>\n</ul>\n<p>Thanks for reading. If you find this article useful or you learn something from this, please share and give a clap for it. Had any questions or want to give some feedback, leave a comment below.\u00a0\ud83d\ude4c</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=15219795c597\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["kotlin-coroutines","threads","android"]},{"title":"How to start using Koin in Android Development","pubDate":"2020-06-15 02:36:39","link":"https://bobirawan.medium.com/how-to-start-using-koin-in-android-development-70ccf49833f1?source=rss-e396eba39441------2","guid":"https://medium.com/p/70ccf49833f1","author":"Bobby Irawan","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*hhj2kIEoH_brxFTI0Vv_6A.jpeg","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hhj2kIEoH_brxFTI0Vv_6A.jpeg\"><figcaption><a href=\"https://insert-koin.io/\">Source</a></figcaption></figure><p><em>Please do remember that everything I write in this article is based on what I know. If you found any mistake, please leave a response, thanks</em></p>\n<blockquote><strong>Intro to\u00a0Koin</strong></blockquote>\n<p>Using dependency injection when developing an Android application is kind of a mandatory nowadays. The purpose of using dependency injection is to decouple the creation of an object. Also, in <a href=\"https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\">SOLID design principles</a>, the letter D (Dependency Inversion) is explaining the reason why you must use Dependency Injection (DI). One of them is to make your code less coupled. Let say you have two classes, Class A and Class B. Class A is using some method from class B. In this case, it creates a dependency between these classes. Class A will depend on Class B. Thus, we need to create an instance of class B in class A, so we can access method from class B in class A. When you use this approach it makes harder to test because you can\u2019t mock the object. You will start to see it on the big scale\u00a0project.</p>\n<a href=\"https://medium.com/media/e24688f418ccbfd37f958fbb0aa1e069/href\">https://medium.com/media/e24688f418ccbfd37f958fbb0aa1e069/href</a><p>In the Android world, there\u2019s a well known DI framework called <a href=\"https://dagger.dev/\">Dagger 2</a>. Maybe you are using it too right now. I won\u2019t explain about Dagger 2 here because there\u2019s already a lot of articles about it. But what I want to tell is Dagger 2 friend, if I can say that, which is <a href=\"https://insert-koin.io/\">Koin</a>. Koin is a DI framework that entirely written in Kotlin and uses the power of it. Maybe you ask, Dagger 2 is already enough and powerful why we need another one? You can find the answer <a href=\"https://proandroiddev.com/better-dependency-injection-for-android-567b93353ad\">here</a>. If you too lazy to open the link, I\u2019ll tell you here a bit. Dagger 2 is made in the Java language context, but it could be better with Kotlin. Well, it\u2019s true. Comparing the code that you had when using Dagger 2 and using Koin, there\u2019s a huge difference between those\u00a0codes.</p>\n<a href=\"https://medium.com/media/7d9021e8862685943418b72a84582862/href\">https://medium.com/media/7d9021e8862685943418b72a84582862/href</a><a href=\"https://medium.com/media/4f567bc987e5e43030aa30adbde47f85/href\">https://medium.com/media/4f567bc987e5e43030aa30adbde47f85/href</a><p>One more thing, the design patterns that Koin used is called the Service Locator pattern, not the well-known Dependency Injection patterns. For you who don\u2019t know the difference between these patterns, you can read the explanation <a href=\"https://medium.com/analytics-vidhya/dependency-injection-and-service-locator-4dbe4559a3ba\">here</a> and also <a href=\"https://medium.com/@ivorobioff/dependency-injection-vs-service-locator-2bb8484c2e20\">here</a>. Something that is quite bothering about Koin is the performance issue. But it keeps better and better as the new version is introduced. When version 2.1 was out, it had a huge improvement in performance compared to version 2.0, you can see it\u00a0<a href=\"https://medium.com/koin-developers/unboxing-koin-2-1-7f1133ebb790\">here</a>.</p>\n<p>Enough with the introduction of Koin in general. Next, I will explain Koin in Android Development.</p>\n<blockquote><strong>Koin in Android Development</strong></blockquote>\n<p>To start using Koin, you need to add Koin dependency first in your code. When I write this article, the latest stable version is 2.1.5. I\u2019m using the included ViewModel feature of Koin. Yes, that\u2019s right, Koin also supports Dependency Injection for ViewModel. To me, it\u2019s an advantage when using MVVM in our project and combines it with\u00a0Koin.</p>\n<pre>implementation \"org.koin:koin-android-viewmodel:2.1.5\"</pre>\n<p>To fully understand using Koin in your project, I already created a small application that displays a list of news from <a href=\"https://newsapi.org/\">News API</a>. I also use the suggested MVVM design pattern in the\u00a0project.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*-yY0l4XD3kLcZz0rO1sfRA.png\"><figcaption>MVVM design pattern\u00a0guide.</figcaption></figure><blockquote><strong>1. Define the Koin\u00a0Modules</strong></blockquote>\n<p>In Koin, a module is kind of a space where we declare all our dependencies that will be injected into another component. From my perspective, the module is used to separate all the dependencies, based on what the dependencies do, so we, as a human, will easy to understand it. Let\u2019s take an example from before, which is class A will depend on class B to access the function from class B. Here\u2019s how you defined the module for\u00a0it.</p>\n<a href=\"https://medium.com/media/52dd2d1359f9fc3ff19736bdd8a6bd0f/href\">https://medium.com/media/52dd2d1359f9fc3ff19736bdd8a6bd0f/href</a><p>From the code above, there\u2019s something that probably new for you. I\u2019ll explain\u00a0that.</p>\n<ul>\n<li>get() method. This method is to tell the Koin that this class needed a component instance, and Koin will provide it. There\u2019s a lazy version for the get() which is inject(). When you use get() in the module, it marks that your class is using constructor injection. If you want to do the property injection, remove the get() method from the class in the\u00a0module.</li>\n<li>module{} is where to place all your dependencies. Also, you can see that it is assigned to a property, this property is needed when we start our Koin container, I\u2019ll explain it\u00a0later.</li>\n<li>single{} is used to tell the Koin to create a singleton that will only be created once. The concept of single{} Koin is the same as the Singleton pattern concept. If you want to create a new instance every time you access the dependency, like presenter in the MVP pattern, you can use factory{}.</li>\n</ul>\n<p>Let\u2019s took the implementation in our example\u00a0project.</p>\n<a href=\"https://medium.com/media/eba64f70a3d88e866d82201512f20657/href\">https://medium.com/media/eba64f70a3d88e866d82201512f20657/href</a><p>I separate the module based on the scope of the dependencies inside each module. You can see there\u2019s retrofitModule, repositoryModule, and viewModelModule, the name is explaining what the scope is. You might notice that the single{} method at line 20 had a type tag &lt;NewsRepositoryContract&gt; with it. Put it in a simple way, type tag is used when you had an interface that attached to the class. This interface is needed to bind too. What if you had more than one interface that attached to your class and needs to bind it? Koin had the solution for it, you can read further\u00a0<a href=\"https://medium.com/koin-developers/ready-for-koin-2-0-2722ab59cac3#659b\">here</a>.</p>\n<p>Here\u2019s the explanation of each\u00a0module:</p>\n<ul>\n<li>retrofitModule\u00a0: This module is used to provide the Retrofit object to call the service. It had three single{} methods for providing Retrofit instance, OkHttpClient, and the last is for the endpoint of the Retrofit interface that is already created\u00a0before.</li>\n<li>repositoryModule\u00a0: Like its name, it used to provide the repository dependencies that will be used in ViewModel class. It had get() in the parameter because we used constructor injection in the Repository class to call API from the Retrofit endpoint interface.</li>\n<li>viewModelModule\u00a0: If you use MVVM pattern, like in this example project, using Koin would be a benefit for you. Koin provides a method to inject ViewModel that easy to use. It had its method called viewModel{}. So, instead of writing the factory for the ViewModel in your Activity or Fragment you utilize the provided way from Koin. You\u2019ll see how to declare the ViewModel object in the Activity or Fragment\u00a0soon.</li>\n</ul>\n<p>I\u2019m not using factory{} because there\u2019s no need to use it here. That\u2019s all for the beginning part. I hope you guys quite understand or had an insight on how to create a Koin module. Now let\u2019s continue to the next step, which is to start the Koin\u00a0module.</p>\n<blockquote><strong>2. Start\u00a0Koin</strong></blockquote>\n<p>After declaring all the necessary modules before, it\u2019s time for starting the Koin. In the project, I defined the startKoin{} in Application class. You able to do it other than in Application class, but it\u2019s recommended to do this there. You must create the Application class on your own, and don\u2019t forget to add the Application class name in your manifest file. Otherwise, it won\u2019t recognize the Application class you\u2019ve\u00a0created.</p>\n<a href=\"https://medium.com/media/3b33dfa6456e1f30b3ad127bb40fa0c0/href\">https://medium.com/media/3b33dfa6456e1f30b3ad127bb40fa0c0/href</a><p>The code above is the implementation for starting the Koin in the example project. Inside startKoin{}, it defines the Android Logger level, the context for Koin, and the list of modules. Setting the context to Koin using androidContext(this) is needed when you want to access the Application instance outside the Activity or Fragment. Check out <a href=\"https://doc.insert-koin.io/#/koin-android/dsl\">here</a> for the explanation. After this, we will learn the injecting part. Stay\u00a0tuned.</p>\n<blockquote><strong>3. Injecting the dependencies</strong></blockquote>\n<p>Here\u2019s the final part that you need to know on how to use Koin, the injecting part. Mostly I injected through the constructor, but I\u2019ll explain on injecting using property injection too. You able to use the constructor injection outside the Activity or Fragment, i.e., our Repository class is using the constructor injection. There\u2019s a reason why Activity and Fragment can\u2019t use constructor injection, it\u2019s because when you create those two, it requires an empty constructor. When you try to use constructor injection, it will throw an error, that\u2019s why you must use property injection in Activity and Fragment. Based on the <a href=\"https://doc.insert-koin.io/#/koin-android/get-instances\">documentation</a>, Activity and Fragment is extended with the KoinComponents interface. Either using get() or by inject() for the lazy way to do the property injection in Koin. For ViewModel use getViewModel() or by viewModel() for the lazy way to retrieve the instance of your ViewModel class in Activity or Fragment.</p>\n<a href=\"https://medium.com/media/f7d348b0caf124cc07f95b01a99e32b9/href\">https://medium.com/media/f7d348b0caf124cc07f95b01a99e32b9/href</a><p>Besides using constructor injection for the class outside of Activity and Fragment, i.e., Repository class, we can utilize property injection too. Not like those two that automatically extended KoinComponents, we need to manually extend the KoinComponents to the class that using property injection. See the example code\u00a0below.</p>\n<a href=\"https://medium.com/media/8cf0373b20ca64f95f3de53bc2e8a5f0/href\">https://medium.com/media/8cf0373b20ca64f95f3de53bc2e8a5f0/href</a><blockquote><strong>Verdict</strong></blockquote>\n<p>Those steps are what you mostly need when starting to using the Koin framework in your project. Koin is great, easy to use, and using the power of Kotlin, cheers for the creator, and all the contributors. Though it still lacks in terms of performance, I believe they will fix it soon. That\u2019s all from me,\u00a0folks.</p>\n<p>For the full project, you can get it\u00a0<a href=\"https://github.com/bobbyirawan09/IntroKoin\">here</a>.</p>\n<blockquote><strong>References</strong></blockquote>\n<ul>\n<li><a href=\"https://medium.com/swlh/dependency-injection-with-koin-6b6364dc8dba\">https://medium.com/swlh/dependency-injection-with-koin-6b6364dc8dba</a></li>\n<li><a href=\"https://medium.com/@elye.project/dagger-2-and-koin-comparison-4223dae9725d\">https://medium.com/@elye.project/dagger-2-and-koin-comparison-4223dae9725d</a></li>\n<li><a href=\"https://doc.insert-koin.io/#/koin-core/koin-component\">https://doc.insert-koin.io/#/koin-core/koin-component</a></li>\n</ul>\n<p>Thanks for reading. If you find this article useful or you learn something from this, please share and give a clap for it. Had any questions or want to give some feedback, leave a comment below.\u00a0\ud83d\ude4c</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=70ccf49833f1\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*hhj2kIEoH_brxFTI0Vv_6A.jpeg\"><figcaption><a href=\"https://insert-koin.io/\">Source</a></figcaption></figure><p><em>Please do remember that everything I write in this article is based on what I know. If you found any mistake, please leave a response, thanks</em></p>\n<blockquote><strong>Intro to\u00a0Koin</strong></blockquote>\n<p>Using dependency injection when developing an Android application is kind of a mandatory nowadays. The purpose of using dependency injection is to decouple the creation of an object. Also, in <a href=\"https://scotch.io/bar-talk/s-o-l-i-d-the-first-five-principles-of-object-oriented-design\">SOLID design principles</a>, the letter D (Dependency Inversion) is explaining the reason why you must use Dependency Injection (DI). One of them is to make your code less coupled. Let say you have two classes, Class A and Class B. Class A is using some method from class B. In this case, it creates a dependency between these classes. Class A will depend on Class B. Thus, we need to create an instance of class B in class A, so we can access method from class B in class A. When you use this approach it makes harder to test because you can\u2019t mock the object. You will start to see it on the big scale\u00a0project.</p>\n<a href=\"https://medium.com/media/e24688f418ccbfd37f958fbb0aa1e069/href\">https://medium.com/media/e24688f418ccbfd37f958fbb0aa1e069/href</a><p>In the Android world, there\u2019s a well known DI framework called <a href=\"https://dagger.dev/\">Dagger 2</a>. Maybe you are using it too right now. I won\u2019t explain about Dagger 2 here because there\u2019s already a lot of articles about it. But what I want to tell is Dagger 2 friend, if I can say that, which is <a href=\"https://insert-koin.io/\">Koin</a>. Koin is a DI framework that entirely written in Kotlin and uses the power of it. Maybe you ask, Dagger 2 is already enough and powerful why we need another one? You can find the answer <a href=\"https://proandroiddev.com/better-dependency-injection-for-android-567b93353ad\">here</a>. If you too lazy to open the link, I\u2019ll tell you here a bit. Dagger 2 is made in the Java language context, but it could be better with Kotlin. Well, it\u2019s true. Comparing the code that you had when using Dagger 2 and using Koin, there\u2019s a huge difference between those\u00a0codes.</p>\n<a href=\"https://medium.com/media/7d9021e8862685943418b72a84582862/href\">https://medium.com/media/7d9021e8862685943418b72a84582862/href</a><a href=\"https://medium.com/media/4f567bc987e5e43030aa30adbde47f85/href\">https://medium.com/media/4f567bc987e5e43030aa30adbde47f85/href</a><p>One more thing, the design patterns that Koin used is called the Service Locator pattern, not the well-known Dependency Injection patterns. For you who don\u2019t know the difference between these patterns, you can read the explanation <a href=\"https://medium.com/analytics-vidhya/dependency-injection-and-service-locator-4dbe4559a3ba\">here</a> and also <a href=\"https://medium.com/@ivorobioff/dependency-injection-vs-service-locator-2bb8484c2e20\">here</a>. Something that is quite bothering about Koin is the performance issue. But it keeps better and better as the new version is introduced. When version 2.1 was out, it had a huge improvement in performance compared to version 2.0, you can see it\u00a0<a href=\"https://medium.com/koin-developers/unboxing-koin-2-1-7f1133ebb790\">here</a>.</p>\n<p>Enough with the introduction of Koin in general. Next, I will explain Koin in Android Development.</p>\n<blockquote><strong>Koin in Android Development</strong></blockquote>\n<p>To start using Koin, you need to add Koin dependency first in your code. When I write this article, the latest stable version is 2.1.5. I\u2019m using the included ViewModel feature of Koin. Yes, that\u2019s right, Koin also supports Dependency Injection for ViewModel. To me, it\u2019s an advantage when using MVVM in our project and combines it with\u00a0Koin.</p>\n<pre>implementation \"org.koin:koin-android-viewmodel:2.1.5\"</pre>\n<p>To fully understand using Koin in your project, I already created a small application that displays a list of news from <a href=\"https://newsapi.org/\">News API</a>. I also use the suggested MVVM design pattern in the\u00a0project.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/960/1*-yY0l4XD3kLcZz0rO1sfRA.png\"><figcaption>MVVM design pattern\u00a0guide.</figcaption></figure><blockquote><strong>1. Define the Koin\u00a0Modules</strong></blockquote>\n<p>In Koin, a module is kind of a space where we declare all our dependencies that will be injected into another component. From my perspective, the module is used to separate all the dependencies, based on what the dependencies do, so we, as a human, will easy to understand it. Let\u2019s take an example from before, which is class A will depend on class B to access the function from class B. Here\u2019s how you defined the module for\u00a0it.</p>\n<a href=\"https://medium.com/media/52dd2d1359f9fc3ff19736bdd8a6bd0f/href\">https://medium.com/media/52dd2d1359f9fc3ff19736bdd8a6bd0f/href</a><p>From the code above, there\u2019s something that probably new for you. I\u2019ll explain\u00a0that.</p>\n<ul>\n<li>get() method. This method is to tell the Koin that this class needed a component instance, and Koin will provide it. There\u2019s a lazy version for the get() which is inject(). When you use get() in the module, it marks that your class is using constructor injection. If you want to do the property injection, remove the get() method from the class in the\u00a0module.</li>\n<li>module{} is where to place all your dependencies. Also, you can see that it is assigned to a property, this property is needed when we start our Koin container, I\u2019ll explain it\u00a0later.</li>\n<li>single{} is used to tell the Koin to create a singleton that will only be created once. The concept of single{} Koin is the same as the Singleton pattern concept. If you want to create a new instance every time you access the dependency, like presenter in the MVP pattern, you can use factory{}.</li>\n</ul>\n<p>Let\u2019s took the implementation in our example\u00a0project.</p>\n<a href=\"https://medium.com/media/eba64f70a3d88e866d82201512f20657/href\">https://medium.com/media/eba64f70a3d88e866d82201512f20657/href</a><p>I separate the module based on the scope of the dependencies inside each module. You can see there\u2019s retrofitModule, repositoryModule, and viewModelModule, the name is explaining what the scope is. You might notice that the single{} method at line 20 had a type tag &lt;NewsRepositoryContract&gt; with it. Put it in a simple way, type tag is used when you had an interface that attached to the class. This interface is needed to bind too. What if you had more than one interface that attached to your class and needs to bind it? Koin had the solution for it, you can read further\u00a0<a href=\"https://medium.com/koin-developers/ready-for-koin-2-0-2722ab59cac3#659b\">here</a>.</p>\n<p>Here\u2019s the explanation of each\u00a0module:</p>\n<ul>\n<li>retrofitModule\u00a0: This module is used to provide the Retrofit object to call the service. It had three single{} methods for providing Retrofit instance, OkHttpClient, and the last is for the endpoint of the Retrofit interface that is already created\u00a0before.</li>\n<li>repositoryModule\u00a0: Like its name, it used to provide the repository dependencies that will be used in ViewModel class. It had get() in the parameter because we used constructor injection in the Repository class to call API from the Retrofit endpoint interface.</li>\n<li>viewModelModule\u00a0: If you use MVVM pattern, like in this example project, using Koin would be a benefit for you. Koin provides a method to inject ViewModel that easy to use. It had its method called viewModel{}. So, instead of writing the factory for the ViewModel in your Activity or Fragment you utilize the provided way from Koin. You\u2019ll see how to declare the ViewModel object in the Activity or Fragment\u00a0soon.</li>\n</ul>\n<p>I\u2019m not using factory{} because there\u2019s no need to use it here. That\u2019s all for the beginning part. I hope you guys quite understand or had an insight on how to create a Koin module. Now let\u2019s continue to the next step, which is to start the Koin\u00a0module.</p>\n<blockquote><strong>2. Start\u00a0Koin</strong></blockquote>\n<p>After declaring all the necessary modules before, it\u2019s time for starting the Koin. In the project, I defined the startKoin{} in Application class. You able to do it other than in Application class, but it\u2019s recommended to do this there. You must create the Application class on your own, and don\u2019t forget to add the Application class name in your manifest file. Otherwise, it won\u2019t recognize the Application class you\u2019ve\u00a0created.</p>\n<a href=\"https://medium.com/media/3b33dfa6456e1f30b3ad127bb40fa0c0/href\">https://medium.com/media/3b33dfa6456e1f30b3ad127bb40fa0c0/href</a><p>The code above is the implementation for starting the Koin in the example project. Inside startKoin{}, it defines the Android Logger level, the context for Koin, and the list of modules. Setting the context to Koin using androidContext(this) is needed when you want to access the Application instance outside the Activity or Fragment. Check out <a href=\"https://doc.insert-koin.io/#/koin-android/dsl\">here</a> for the explanation. After this, we will learn the injecting part. Stay\u00a0tuned.</p>\n<blockquote><strong>3. Injecting the dependencies</strong></blockquote>\n<p>Here\u2019s the final part that you need to know on how to use Koin, the injecting part. Mostly I injected through the constructor, but I\u2019ll explain on injecting using property injection too. You able to use the constructor injection outside the Activity or Fragment, i.e., our Repository class is using the constructor injection. There\u2019s a reason why Activity and Fragment can\u2019t use constructor injection, it\u2019s because when you create those two, it requires an empty constructor. When you try to use constructor injection, it will throw an error, that\u2019s why you must use property injection in Activity and Fragment. Based on the <a href=\"https://doc.insert-koin.io/#/koin-android/get-instances\">documentation</a>, Activity and Fragment is extended with the KoinComponents interface. Either using get() or by inject() for the lazy way to do the property injection in Koin. For ViewModel use getViewModel() or by viewModel() for the lazy way to retrieve the instance of your ViewModel class in Activity or Fragment.</p>\n<a href=\"https://medium.com/media/f7d348b0caf124cc07f95b01a99e32b9/href\">https://medium.com/media/f7d348b0caf124cc07f95b01a99e32b9/href</a><p>Besides using constructor injection for the class outside of Activity and Fragment, i.e., Repository class, we can utilize property injection too. Not like those two that automatically extended KoinComponents, we need to manually extend the KoinComponents to the class that using property injection. See the example code\u00a0below.</p>\n<a href=\"https://medium.com/media/8cf0373b20ca64f95f3de53bc2e8a5f0/href\">https://medium.com/media/8cf0373b20ca64f95f3de53bc2e8a5f0/href</a><blockquote><strong>Verdict</strong></blockquote>\n<p>Those steps are what you mostly need when starting to using the Koin framework in your project. Koin is great, easy to use, and using the power of Kotlin, cheers for the creator, and all the contributors. Though it still lacks in terms of performance, I believe they will fix it soon. That\u2019s all from me,\u00a0folks.</p>\n<p>For the full project, you can get it\u00a0<a href=\"https://github.com/bobbyirawan09/IntroKoin\">here</a>.</p>\n<blockquote><strong>References</strong></blockquote>\n<ul>\n<li><a href=\"https://medium.com/swlh/dependency-injection-with-koin-6b6364dc8dba\">https://medium.com/swlh/dependency-injection-with-koin-6b6364dc8dba</a></li>\n<li><a href=\"https://medium.com/@elye.project/dagger-2-and-koin-comparison-4223dae9725d\">https://medium.com/@elye.project/dagger-2-and-koin-comparison-4223dae9725d</a></li>\n<li><a href=\"https://doc.insert-koin.io/#/koin-core/koin-component\">https://doc.insert-koin.io/#/koin-core/koin-component</a></li>\n</ul>\n<p>Thanks for reading. If you find this article useful or you learn something from this, please share and give a clap for it. Had any questions or want to give some feedback, leave a comment below.\u00a0\ud83d\ude4c</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=70ccf49833f1\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["android","kotlin","dependency-injection","android-app-development","koin"]},{"title":"Lottie Android with Listener","pubDate":"2020-05-19 03:39:24","link":"https://bobirawan.medium.com/lottie-android-with-listener-373cbf617451?source=rss-e396eba39441------2","guid":"https://medium.com/p/373cbf617451","author":"Bobby Irawan","thumbnail":"https://cdn-images-1.medium.com/max/1024/1*xRRFr4Gj9lZxscTPDcQTBw.png","description":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xRRFr4Gj9lZxscTPDcQTBw.png\"><figcaption><a href=\"https://airbnb.design/introducing-lottie/\">Lottie logo</a></figcaption></figure><p><a href=\"https://github.com/airbnb/lottie-android\">Lottie</a> is a well-known library in the Android world for showing complex and powerful animation with just a simple code. I still remember back in the day, creating simple animation is pretty difficult if comparing using Lottie to show animation.</p>\n<p>Maybe you think \u2018How can I produce the animation for my project?\u2019. No more worry, just straight to <a href=\"https://lottiefiles.com/\">LottieFiles.com</a>. The website had thousands of free animations you can choose, there\u2019s also a paid version for the animation. You can also download the LottieFiles app for a better experience when running the animation.</p>\n<p>In this article, I won't explain the basic usage of Lottie. I consider you had understood it before going through this article. As of the writing of this article, I\u2019m using version 3.4.0, check the <a href=\"https://github.com/airbnb/lottie-android\">documentation</a> for further information.</p>\n<pre>implementation 'com.airbnb.android:lottie:3.4.0'</pre>\n<blockquote><strong>Combining Listener with\u00a0Lottie</strong></blockquote>\n<p>If you had some requirements from your client or your product team to not just show the animation from finish to start, rather it needs to show something in the middle of the animation or in the end, adding a listener might help you. I would say using a listener like the next step in implementing Lottie. You can suite the animation with your business logic or the requirement that\u00a0needed.</p>\n<p>This article will cover the basic usage of two listeners. Those are\u00a0:</p>\n<ul>\n<li>AnimatorUpdateListener, this listener will be used when you want to do something else, like showing Toast, in certain animation frames/progress. Read the <a href=\"https://developer.android.com/reference/android/animation/ValueAnimator\">documentation</a> for further information.</li>\n<li>AnimatorListener will listen when animation start, end, cancel, and repeat. Read the <a href=\"https://developer.android.com/reference/android/animation/Animator.AnimatorListener\">documentation</a> for further information</li>\n</ul>\n<p>You can combine both listeners in one Lottie widget. But in many cases, the first one will be\u00a0enough.</p>\n<p>Enough with the talk, let\u2019s strike to the\u00a0example.</p>\n<blockquote><strong>Example time</strong></blockquote>\n<p>I\u2019m using <a href=\"https://assets7.lottiefiles.com/private_files/lf30_yP8raD.json\">this</a> animation, to make it visible and clear for you guys, kudos to the creator. I divide the example into two sections, usage of animator update listener and usage of animator listener. Almost forgot, I write the code in Kotlin, the Java code shouldn\u2019t have any big difference. \ud83d\ude03</p>\n<a href=\"https://medium.com/media/fa3edaa9aa4e67f67a3e27cfb329d4d7/href\">https://medium.com/media/fa3edaa9aa4e67f67a3e27cfb329d4d7/href</a><h4><strong>Example 1\u200a\u2014\u200aAnimatorUpdateListener</strong></h4>\n<p>Here\u2019s what we want to achieve, if the animation reaches 50% progress it will stop and show some text. This example is simple and everybody will easily understand this. You can see below is the code to implement the AnimatorUpdateListener:</p>\n<a href=\"https://medium.com/media/56acded1fa23c19e92f6fa8e9ae42162/href\">https://medium.com/media/56acded1fa23c19e92f6fa8e9ae42162/href</a><p>The first line is how to define what animation Lottie widget should use. That\u2019s right, you can set the animation just using the URL. You don\u2019t need to download it and put it in your assets or raw folder. Make sure to add permission for accessing the internet in your manifest\u00a0file.</p>\n<p>The second line is where the implementation starts. To get the progress we need a property called animatedValue. The property had a value between 0 to 1, so if we want to get the progress in percentage, just multiplies it with a hundred would solve the\u00a0issue.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/1*t7s7Z8TklWw-JmDZhgF4gQ.gif\"></figure><p>Here are some tips from me. The property animatedValue does not represent the frame of the animation, rather it represents the whole progress. So no matter if you\u2019re animation had 100 or 180 frames, the animatedValue will always have 0 to 1 value. If you want to do something in a certain frame of the animation, not from the progress, you can do a calculation like\u00a0below:</p>\n<pre>val {property name} = ({your desired frame} / {max frame of the animation}).toInt()</pre>\n<p>The value of calculation will be in progress range. I know it\u2019s not the best practice to do it, feel free to use your own way, I just want to give the big picture\u00a0here.</p>\n<h4>Example 2\u2014 AnimatorListener</h4>\n<p>The usage of this listener will be based on the 4 methods I had explained before. For example, you want to hide the animation when it finished or canceled. The methods are covering major cases for animation.</p>\n<a href=\"https://medium.com/media/de01ea1f6f0539ca6a8dbb9bc06052c3/href\">https://medium.com/media/de01ea1f6f0539ca6a8dbb9bc06052c3/href</a><p>As you can see from the code, it had 4 methods that need to override. What I want to achieve from the code is to hide the widget if it\u2019s canceled. The canceled state will be triggered by clicking the\u00a0button.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/1*1XatJHfxKXosFe_Gt8U0Fw.gif\"></figure><p>After clicking the button, the Lottie widget will be hidden and the animation will be in canceled state. Since the animation is canceled, progress value won\u2019t be updating anymore. Though it simple and seems pretty expensive to do it, please remember that it only an example. You can adjust the implementation of this listener based on the requirement needed from your client or your product\u00a0team.</p>\n<blockquote><strong>Verdict</strong></blockquote>\n<p>Lottie alone is great, but when combining with a listener make it more awesome. We can adjust what to do in certain frames/progress of the animation. The implementation not to complex, and it\u2019s easy to understand. It\u2019s a win-win solution both for the developer side and the business\u00a0side.</p>\n<p>For the full project, you can get it <a href=\"https://github.com/bobbyirawan09\">here</a>.\u00a0\ud83d\ude3a</p>\n<blockquote><strong>References</strong></blockquote>\n<ul>\n<li><a href=\"https://medium.com/comparethemarket/lottie-on-android-part-2-animation-listeners-59f54d702285\">https://medium.com/comparethemarket/lottie-on-android-part-2-animation-listeners-59f54d702285</a></li>\n<li><a href=\"http://airbnb.io/lottie/#/android\">http://airbnb.io/lottie/#/android</a></li>\n<li><a href=\"https://medium.com/@eijaz/animations-in-android-using-lottie-kotlin-679364ed3f26\">https://medium.com/@eijaz/animations-in-android-using-lottie-kotlin-679364ed3f26</a></li>\n</ul>\n<p>Thanks for reading. If you find this article useful or you learn something from this, please share and give a clap for it. Had any questions or want to give some feedback, leave a comment below.\u00a0\ud83d\ude4c</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=373cbf617451\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*xRRFr4Gj9lZxscTPDcQTBw.png\"><figcaption><a href=\"https://airbnb.design/introducing-lottie/\">Lottie logo</a></figcaption></figure><p><a href=\"https://github.com/airbnb/lottie-android\">Lottie</a> is a well-known library in the Android world for showing complex and powerful animation with just a simple code. I still remember back in the day, creating simple animation is pretty difficult if comparing using Lottie to show animation.</p>\n<p>Maybe you think \u2018How can I produce the animation for my project?\u2019. No more worry, just straight to <a href=\"https://lottiefiles.com/\">LottieFiles.com</a>. The website had thousands of free animations you can choose, there\u2019s also a paid version for the animation. You can also download the LottieFiles app for a better experience when running the animation.</p>\n<p>In this article, I won't explain the basic usage of Lottie. I consider you had understood it before going through this article. As of the writing of this article, I\u2019m using version 3.4.0, check the <a href=\"https://github.com/airbnb/lottie-android\">documentation</a> for further information.</p>\n<pre>implementation 'com.airbnb.android:lottie:3.4.0'</pre>\n<blockquote><strong>Combining Listener with\u00a0Lottie</strong></blockquote>\n<p>If you had some requirements from your client or your product team to not just show the animation from finish to start, rather it needs to show something in the middle of the animation or in the end, adding a listener might help you. I would say using a listener like the next step in implementing Lottie. You can suite the animation with your business logic or the requirement that\u00a0needed.</p>\n<p>This article will cover the basic usage of two listeners. Those are\u00a0:</p>\n<ul>\n<li>AnimatorUpdateListener, this listener will be used when you want to do something else, like showing Toast, in certain animation frames/progress. Read the <a href=\"https://developer.android.com/reference/android/animation/ValueAnimator\">documentation</a> for further information.</li>\n<li>AnimatorListener will listen when animation start, end, cancel, and repeat. Read the <a href=\"https://developer.android.com/reference/android/animation/Animator.AnimatorListener\">documentation</a> for further information</li>\n</ul>\n<p>You can combine both listeners in one Lottie widget. But in many cases, the first one will be\u00a0enough.</p>\n<p>Enough with the talk, let\u2019s strike to the\u00a0example.</p>\n<blockquote><strong>Example time</strong></blockquote>\n<p>I\u2019m using <a href=\"https://assets7.lottiefiles.com/private_files/lf30_yP8raD.json\">this</a> animation, to make it visible and clear for you guys, kudos to the creator. I divide the example into two sections, usage of animator update listener and usage of animator listener. Almost forgot, I write the code in Kotlin, the Java code shouldn\u2019t have any big difference. \ud83d\ude03</p>\n<a href=\"https://medium.com/media/fa3edaa9aa4e67f67a3e27cfb329d4d7/href\">https://medium.com/media/fa3edaa9aa4e67f67a3e27cfb329d4d7/href</a><h4><strong>Example 1\u200a\u2014\u200aAnimatorUpdateListener</strong></h4>\n<p>Here\u2019s what we want to achieve, if the animation reaches 50% progress it will stop and show some text. This example is simple and everybody will easily understand this. You can see below is the code to implement the AnimatorUpdateListener:</p>\n<a href=\"https://medium.com/media/56acded1fa23c19e92f6fa8e9ae42162/href\">https://medium.com/media/56acded1fa23c19e92f6fa8e9ae42162/href</a><p>The first line is how to define what animation Lottie widget should use. That\u2019s right, you can set the animation just using the URL. You don\u2019t need to download it and put it in your assets or raw folder. Make sure to add permission for accessing the internet in your manifest\u00a0file.</p>\n<p>The second line is where the implementation starts. To get the progress we need a property called animatedValue. The property had a value between 0 to 1, so if we want to get the progress in percentage, just multiplies it with a hundred would solve the\u00a0issue.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/1*t7s7Z8TklWw-JmDZhgF4gQ.gif\"></figure><p>Here are some tips from me. The property animatedValue does not represent the frame of the animation, rather it represents the whole progress. So no matter if you\u2019re animation had 100 or 180 frames, the animatedValue will always have 0 to 1 value. If you want to do something in a certain frame of the animation, not from the progress, you can do a calculation like\u00a0below:</p>\n<pre>val {property name} = ({your desired frame} / {max frame of the animation}).toInt()</pre>\n<p>The value of calculation will be in progress range. I know it\u2019s not the best practice to do it, feel free to use your own way, I just want to give the big picture\u00a0here.</p>\n<h4>Example 2\u2014 AnimatorListener</h4>\n<p>The usage of this listener will be based on the 4 methods I had explained before. For example, you want to hide the animation when it finished or canceled. The methods are covering major cases for animation.</p>\n<a href=\"https://medium.com/media/de01ea1f6f0539ca6a8dbb9bc06052c3/href\">https://medium.com/media/de01ea1f6f0539ca6a8dbb9bc06052c3/href</a><p>As you can see from the code, it had 4 methods that need to override. What I want to achieve from the code is to hide the widget if it\u2019s canceled. The canceled state will be triggered by clicking the\u00a0button.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/480/1*1XatJHfxKXosFe_Gt8U0Fw.gif\"></figure><p>After clicking the button, the Lottie widget will be hidden and the animation will be in canceled state. Since the animation is canceled, progress value won\u2019t be updating anymore. Though it simple and seems pretty expensive to do it, please remember that it only an example. You can adjust the implementation of this listener based on the requirement needed from your client or your product\u00a0team.</p>\n<blockquote><strong>Verdict</strong></blockquote>\n<p>Lottie alone is great, but when combining with a listener make it more awesome. We can adjust what to do in certain frames/progress of the animation. The implementation not to complex, and it\u2019s easy to understand. It\u2019s a win-win solution both for the developer side and the business\u00a0side.</p>\n<p>For the full project, you can get it <a href=\"https://github.com/bobbyirawan09\">here</a>.\u00a0\ud83d\ude3a</p>\n<blockquote><strong>References</strong></blockquote>\n<ul>\n<li><a href=\"https://medium.com/comparethemarket/lottie-on-android-part-2-animation-listeners-59f54d702285\">https://medium.com/comparethemarket/lottie-on-android-part-2-animation-listeners-59f54d702285</a></li>\n<li><a href=\"http://airbnb.io/lottie/#/android\">http://airbnb.io/lottie/#/android</a></li>\n<li><a href=\"https://medium.com/@eijaz/animations-in-android-using-lottie-kotlin-679364ed3f26\">https://medium.com/@eijaz/animations-in-android-using-lottie-kotlin-679364ed3f26</a></li>\n</ul>\n<p>Thanks for reading. If you find this article useful or you learn something from this, please share and give a clap for it. Had any questions or want to give some feedback, leave a comment below.\u00a0\ud83d\ude4c</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=373cbf617451\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["kotlin","lottie-animation","lottie","android-app-development","android"]}]}